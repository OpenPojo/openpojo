#Latest news on what is happening in OpenPojo.

= News =
 * *2010-12-03:*
  * OpenPojo-0.3.3 released - Licensing is now LGPL instead of GPL.
 * *2010-11-13:*
  * OpenPojo-0.3.2 released
   * Added
    * OpenPojo will now enumerate classes & packages in JAR files as well as file system.
   * Deprecated
    * PackageHelper class is no longer used and will be removed in 0.4.x releases.
 * *2010-11-05:*
  * OpenPojo-0.3.1 released
   * Added
    * FilterCloverClasses to filter out clover classes while enumerating..
    * FilterNestedClasses to filter out subclasses while enumerating.
    * PojoField now has two new methods (isParameterized, and getParameterTypes) for generics support.
   * Fixed
    * Issue with PojoClass showing up more than once when a package spans multiple directories.
    * Issue with InstanceFactory failing to construct if type was not equal to required, now works if type is assignable to required.
    * Issue with BusinessIdentityTester failing to detect hashCode not being dispatched to BusinessIdentity.
   * Removed
    * LoggingException unused.
    * ValidationException unused.
    * Log4JLogger and SLF4JLogger don't detect or configure the underlying logging framework anymore.
    * Deprecated constructors in filters that took in prior filter, use FilterChain to achieve the same effect now.
 * *2010-10-22:*
  * OpenPojo-0.2.0 released
   * JUnit is now optional, if you don't have TestNG or JUnit, OpenPojo will throw Java's AssertionError.
   * Fixed minor issue with PojoClassFactory when package and system path aren't 1 - 1 (one to one).
    * PackageHelper.getPackageAsDirectory() removed.
    * PackageHelper.getPackageAsDirectories() introduced to replace previous.
 * *2010-10-21:*
  * OpenPojo-0.1.4 released
   * Fixed minor issue with InstanceFactory failing to construct when constructor utilized primitive type (i.e. int, boolean, short, ...etc).
   * Logger logs have been reworked and cleaned up, formats for Exceptions logging slightly modified to keep all exception log on one line with full stack trace.
 * *2010-10-20:*
  * OpenPojo-0.1.3 released
   * New Class<?> RandomGenerator (side issue uncovered while working on issue 14).
   * New EnumSet<?> RandomGenerator. (The fix for issue 14 - Thanks to David K. for uncovering this issue).
  * First performance test done on OpenPojo, 1,000 POJOs tested with all rules including business rules under 3 secs (details soon).
  * UML graphs are back in the javadocs.jar (if you can't see them, just unjar and navigate with browser - and once more Thanks to David K. for helping with the pom.xml).
 * *2010-10-18:*
  * OpenPojo-0.1.2 released
   * New PojoClassFilter added (FilterEnum) (solving issue 12 & issue 13).
   * New FilterChain now enables chaining any filters together.
   * *Note:* please *skip version 0.1.1* on maven central and go straight to 0.1.2.
 * *2010-10-15:*
  * OpenPojo-0.1.0 released
   * Issue 12 is fixed.
   * All deprecated code has now been removed namely
    * DefaultValuesNullRule class removed (use DefaultValuesNullTester instead).
    * GetterSetterMustExistRule class removed (use individual GetterMustExistRule & SetterMustExistRule instead)
    * PojoField.inovkeSetter method removed (use PojoField.invokeSetter instead).
 * *2010-10-14:*
  * OpenPojo is now available throw maven (see http://bit.ly/dma1wJ).
  * Moving forward artifacts published here will be just a zip of what gets pushed into Maven central.
  * Fixed typo on PojoField.invokeSetter was misspelled (inovkeSetter), old method deprecated for now - Thanks to Hawk N for catching this.
 * *2010-09-27:*
  * PojoClass, PojoMethod & PojoField now extend PojoElement, all three now implement getAnnotation(s) api.
 * *2010-09-25:*
  * Added support for isTransient() & isVolatile() on PojoField (thanks Thomas R.).
 * *2010-09-23:*
  * Added support for getAnnotations on PojoField (thanks [http://code.google.com/u/mikro2nd/ Micro2nd])
 * *2010-08-31:*
  * Added support for registering field prefixes. 
 * *2010-08-28:*
  * Fixed a minor issue (#8) with paths that include spaces on windows (file enumeration was failing).
  * JavaDocs now includes UML diagram on all classes/interfaces generated via UMLGraphDoc (http://www.umlgraph.org/).
 * *2010-08-03:*
  * Added InstanceFactory a new class that can create any PojoClass utilizing one of three ways
    * Exact argument list (FactoryInstance.getInstance(PojoClass, Object... parameters)
    * Random utilizing the minimal available constructor (i.e. the one with the least number of parameters)
    * Random utilizing the most complete available constructor (i.e. the one with the most number of parameters).
  * RandomFactory now falls back on InstanceFactory for a given type if it can't find a registered RandomGenerator for.
 * *2010-06-22:*
  * Fixed a problem with the wiring of the assertion framework not detecting that TestNG not available and throwing initialization errors.
 * *2010-06-21:*
  * Added a BusinessIdentityTester to validate that equals and hashcode calls for a POJO are actually being dispatched to BusinessIdentity facade.
  * Added BusinessKeyMustExistRule to validate that at least one @BusinessKey has been defined and is set to required.
  * Also IdentityFactory now can be configured to route calls to custom IdentityHandler using register/unregister allowing interception of equality/hashcode/validate calls for greater flexibility (specially when writing custom Testers).
 * *2010-06-01:*
  * @BusinessKey annotation is now inherited by child classes for equality & hash code generation.
 * *2010-05-26:*
  * Added support for dynamically creating random instance for any Interface reference.
  * Added support for dynamically creating random enum for any custom enum.
  * Added a facade for Asserts with auto-select based on user env (auto detect and select routing for Asserts, TestNG then JUnit).
  * Added a facade for logging with auto-select based on user env (auto detect and select routing for logs, SLF4J, Log4J then Java Logger)
 * *2010-05-20:*
  * All code is now being tested using unit tests. 100% code coverage.
 * *2010-05-12:*
  * Added PojoClass.getMethods call that returns a list of all PojoMethods adding more control on methods introspection and invocation.
 * *2010-04-22:*
  * Added java.math.BigDecimal to BasicRandomGenerator (Thanks to Arun S.).
  * Added java.math.BigInteger to BasicRandomGenerator.
 * *2010-04-16:*
  * Test coverage is > 80%.
  * Added java.util.Date to BasicRandomGenerator (Thanks to Arun S.).
  * PojoClassImpl.newInstance(Object[]) now works matching argument count.
 * *2010-04-12:* Added source jar to the downloadable zip file.
 * *2010-03-29:* Added Javadoc to the package zip file.
 * *2010-03-22:* Added *toString* implementation that allows you to just delegate using BusinessIdentity.toString(this) calls, will String-inize all contents of your Class.
 * *2010-03-11:* Now fully tested and certified the code is pretty stable main features include
  # *HashCode* & *Equals* can now be done using the *BusinessKey* annotation, just include the openpojo.jar in your runtime environment.
  # Testing done using Rules, and Testers easily.