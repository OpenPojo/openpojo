#Latest news on what is happening in OpenPojo.

= News =
 * *2013-10-27:*
  * OpenPojo-0.4.6 released
    * Fixed
      # BusinessIdentity.areEqual() call is now non blocking thread safe (Thanks to David K).
      # @BusinessKey annotated native arrays are now handled correctly for equality and hashCode (Thanks to Dillon E).
 * *2013-07-05:*
  * OpenPojo-0.4.5 released
    * Added
      # Affirm.affirmContains call to simplify checking that an object is in a collection.
      # Support for Enum.class random value generation.
 * *2013-06-23:*
  * OpenPojo-0.4.4 released
    * Fixed
      # Issue 31 if the getter returns a super class will not cause a getter to be ignored anymore - a reversal on issue 27 fix (Thanks to  JeanLasVEGAs for reporting the issue).
      # Issue 36 now OpenPojo works with JDK 1.5, there was an issue with loading JDK 1.6 specific classes causing cascading error in JDK 1.5 (Thanks to briancallaghan2 for reporting the issue).
 * *2013-02-24:*
  * OpenPojo-0.4.3 released
    * Fixed
      # Issue 35, Issue while enumerating classes in a jar file while handling package names (Thanks to LHCper for uncovering this issue).
 * *2012-09-30:*
  * OpenPojo-0.4.2 released
    * Fixed
      # Possible null pointer exception when attempting to register null PojoClassAdapter, or attempting to adapt a null PojoClass.
 * *2012-09-29:*
  * OpenPojo-0.4.1 released
    * Fixed
      # Issue 29, OpenPojo will now skip JaCoCo imbedded fields allowing you to capture coverage reports from EclEmma (Thanks to nox1119 for uncovering this issue).
 * *2012-08-14:*
  * OpenPojo-0.4.0 released
    * Fixed     
      # Issue 26 with @Entity conflict between using default constructor for Getter/Setter testers and @BusinessKey needing required fields. (Thanks to Andrew W. for uncovering this issue).
      # Issue 27 when getter returns different type than declared on field or setter. (Thanks to Douglas L for uncovering this issue)
    * Added
      # NoFieldShadowingRule to detect re-declaration of fields with the same name in subclasses Issue 28. (Thanks to Benoit for the suggestion)
      # Added a method in PojoMethod to retrieve the return type of the underlying method.
 * *2012-04-07:*
  * OpenPojo-0.3.10 released
    * Fixed
      # A minor issue with MessageFormatter when sent an Array wrapped in Object.
      # Needing to type cast random values generated by RandomFactory
    * Added
      # Support for generating java native arrays (i.e. byte[], Integer[], Person[], ...etc).
      # Added isArray() member to PojoClass.
    * Removed
      # Deprecated PackageHelper class.
 * *2011-12-04:*
  * OpenPojo-0.3.9 released
    * Fixed an issue with running OpenPojo over windows mounted files systems (Thanks to Kajetan F. and Michael G. for uncovering this issue)
    * Added support for intelligent RandomFactory generation (i.e. if you register a LinkedList generator, it will be also used if a Collection, List, AbstractList...etc are requested).
 * *2011-11-22:*
  * OpenPojo-0.3.8 released
    * Fixed issue 22 (Thanks to Sharan for catching this).
    * Added performance boost to BusinessKey fields lookup yielding over 2x preliminary testing for equality & hashCode generation.
 * *2011-10-10:*
  * OpenPojo-0.3.7 released
    * Fixed issue 21.
    * Added support for Filtering PojoClasses by name using regex (issue 20).
 * *2011-8-26:*
  * OpenPojo-0.3.6 released
    * Fixed issue 19 (Thanks to David K. for catching this).
    * Added support for Collections and Map random generation namely the following types will now be randomly generated (Thanks to Kajetan F for pointing out the need for this):
      # Collection
      # List, ArrayList, LinkedList
      # Set,  HashSet, TreeSet, LinkedHashSet
      # Queue, BlockingQueue, LinkedBlockingQueue, PriorityBlockingQueue, DelayQueue, SynchronousQueue.
      # Map, TreeMap, HashMap, LinkedHashMap, IdentityHashMap, WeakHashMap, ConcurrentHashMap
 * *2011-5-03:*
  * OpenPojo-0.3.5 released
    * Fixed issue 18 (Thanks to Stephan M. for catching this).
 * *2011-2-22:*
  * OpenPojo-0.3.4 released
    * Added
      * New rule to allow public fields as long as they are 'static final' (issue 15).
 * *2010-12-03:*
  * OpenPojo-0.3.3 released - Licensing is now LGPL instead of GPL.
 * *2010-11-13:*
  * OpenPojo-0.3.2 released
   * Added
    * OpenPojo will now enumerate classes & packages in JAR files as well as file system.
   * Deprecated
    * PackageHelper class is no longer used and will be removed in 0.4.x releases.
 * *2010-11-05:*
  * OpenPojo-0.3.1 released
   * Added
    * FilterCloverClasses to filter out clover classes while enumerating..
    * FilterNestedClasses to filter out subclasses while enumerating.
    * PojoField now has two new methods (isParameterized, and getParameterTypes) for generics support.
   * Fixed
    * Issue with PojoClass showing up more than once when a package spans multiple directories.
    * Issue with InstanceFactory failing to construct if type was not equal to required, now works if type is assignable to required.
    * Issue with BusinessIdentityTester failing to detect hashCode not being dispatched to BusinessIdentity.
   * Removed
    * LoggingException unused.
    * ValidationException unused.
    * Log4JLogger and SLF4JLogger don't detect or configure the underlying logging framework anymore.
    * Deprecated constructors in filters that took in prior filter, use FilterChain to achieve the same effect now.
 * *2010-10-22:*
  * OpenPojo-0.2.0 released
   * JUnit is now optional, if you don't have TestNG or JUnit, OpenPojo will throw Java's AssertionError.
   * Fixed minor issue with PojoClassFactory when package and system path aren't 1 - 1 (one to one).
    * PackageHelper.getPackageAsDirectory() removed.
    * PackageHelper.getPackageAsDirectories() introduced to replace previous.
 * *2010-10-21:*
  * OpenPojo-0.1.4 released
   * Fixed minor issue with InstanceFactory failing to construct when constructor utilized primitive type (i.e. int, boolean, short, ...etc).
   * Logger logs have been reworked and cleaned up, formats for Exceptions logging slightly modified to keep all exception log on one line with full stack trace.
 * *2010-10-20:*
  * OpenPojo-0.1.3 released
   * New Class<?> RandomGenerator (side issue uncovered while working on issue 14).
   * New EnumSet<?> RandomGenerator. (The fix for issue 14 - Thanks to David K. for uncovering this issue).
  * First performance test done on OpenPojo, 1,000 POJOs tested with all rules including business rules under 3 secs (details soon).
  * UML graphs are back in the javadocs.jar (if you can't see them, just unjar and navigate with browser - and once more Thanks to David K. for helping with the pom.xml).
 * *2010-10-18:*
  * OpenPojo-0.1.2 released
   * New PojoClassFilter added (FilterEnum) (solving issue 12 & issue 13).
   * New FilterChain now enables chaining any filters together.
   * *Note:* please *skip version 0.1.1* on maven central and go straight to 0.1.2.
 * *2010-10-15:*
  * OpenPojo-0.1.0 released
   * Issue 12 is fixed.
   * All deprecated code has now been removed namely
    * DefaultValuesNullRule class removed (use DefaultValuesNullTester instead).
    * GetterSetterMustExistRule class removed (use individual GetterMustExistRule & SetterMustExistRule instead)
    * PojoField.inovkeSetter method removed (use PojoField.invokeSetter instead).
 * *2010-10-14:*
  * OpenPojo is now available throw maven (see http://bit.ly/dma1wJ).
  * Moving forward artifacts published here will be just a zip of what gets pushed into Maven central.
  * Fixed typo on PojoField.invokeSetter was misspelled (inovkeSetter), old method deprecated for now - Thanks to Hawk N for catching this.
 * *2010-09-27:*
  * PojoClass, PojoMethod & PojoField now extend PojoElement, all three now implement getAnnotation(s) api.
 * *2010-09-25:*
  * Added support for isTransient() & isVolatile() on PojoField (thanks Thomas R.).
 * *2010-09-23:*
  * Added support for getAnnotations on PojoField (thanks [http://code.google.com/u/mikro2nd/ Micro2nd])
 * *2010-08-31:*
  * Added support for registering field prefixes. 
 * *2010-08-28:*
  * Fixed a minor issue (#8) with paths that include spaces on windows (file enumeration was failing).
  * JavaDocs now includes UML diagram on all classes/interfaces generated via UMLGraphDoc (http://www.umlgraph.org/).
 * *2010-08-03:*
  * Added InstanceFactory a new class that can create any PojoClass utilizing one of three ways
    * Exact argument list (FactoryInstance.getInstance(PojoClass, Object... parameters)
    * Random utilizing the minimal available constructor (i.e. the one with the least number of parameters)
    * Random utilizing the most complete available constructor (i.e. the one with the most number of parameters).
  * RandomFactory now falls back on InstanceFactory for a given type if it can't find a registered RandomGenerator for.
 * *2010-06-22:*
  * Fixed a problem with the wiring of the assertion framework not detecting that TestNG not available and throwing initialization errors.
 * *2010-06-21:*
  * Added a BusinessIdentityTester to validate that equals and hashcode calls for a POJO are actually being dispatched to BusinessIdentity facade.
  * Added BusinessKeyMustExistRule to validate that at least one @BusinessKey has been defined and is set to required.
  * Also IdentityFactory now can be configured to route calls to custom IdentityHandler using register/unregister allowing interception of equality/hashcode/validate calls for greater flexibility (specially when writing custom Testers).
 * *2010-06-01:*
  * @BusinessKey annotation is now inherited by child classes for equality & hash code generation.
 * *2010-05-26:*
  * Added support for dynamically creating random instance for any Interface reference.
  * Added support for dynamically creating random enum for any custom enum.
  * Added a facade for Asserts with auto-select based on user env (auto detect and select routing for Asserts, TestNG then JUnit).
  * Added a facade for logging with auto-select based on user env (auto detect and select routing for logs, SLF4J, Log4J then Java Logger)
 * *2010-05-20:*
  * All code is now being tested using unit tests. 100% code coverage.
 * *2010-05-12:*
  * Added PojoClass.getMethods call that returns a list of all PojoMethods adding more control on methods introspection and invocation.
 * *2010-04-22:*
  * Added java.math.BigDecimal to BasicRandomGenerator (Thanks to Arun S.).
  * Added java.math.BigInteger to BasicRandomGenerator.
 * *2010-04-16:*
  * Test coverage is > 80%.
  * Added java.util.Date to BasicRandomGenerator (Thanks to Arun S.).
  * PojoClassImpl.newInstance(Object[]) now works matching argument count.
 * *2010-04-12:* Added source jar to the downloadable zip file.
 * *2010-03-29:* Added Javadoc to the package zip file.
 * *2010-03-22:* Added *toString* implementation that allows you to just delegate using BusinessIdentity.toString(this) calls, will String-inize all contents of your Class.
 * *2010-03-11:* Now fully tested and certified the code is pretty stable main features include
  # *HashCode* & *Equals* can now be done using the *BusinessKey* annotation, just include the openpojo.jar in your runtime environment.
  # Testing done using Rules, and Testers easily.