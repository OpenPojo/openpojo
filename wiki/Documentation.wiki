This page holds the top level documentation.

= Overview of the System =
OpenPojo has a few important to note components listed bellow.  However, before diving in, here is the big picture on what the system looks like...

    _TBD_


= Important Classes/Interfaces =
 * PojoClassFactory
  This factory is responsible for constructing PojoClasses.  It can do so using a package name (i.e. com.mypackage), has the ability to recurse into sub-packages, as well as enumerate classes based on implementing a given interface / class.

 * RandomFactory
  This factory is very handy and heavily used when creating random instances of a given class.  Register your own RandomGenerator into it and it will be called every time a random object of that type is needed.

 * InstanceFactory
  This factory is to be used to construct any PojoClass and give a new instance for it.  It has the ability to create using one of three methods.
   * Exact : which can be used when you are wiring to an actual PojoClass and you want an instance of it and you know what constructor parameters you want to use.
   * Random Minimal : which creates an instance using the constructor with the _least_ parameters.
   * Random Complete : which creates an instance using the constructor with the _most_ parameters.
 * RandomGenerator
  This interface defines the contract needed to be implemented so you can register your own custom types into the RandomFacotory.  Feel free to over-ride the default implementations provided for random generation of all the basic java types including Timestamp.

 * BusinessIdentity
  This class exposes three basic methods that you can use in your Pojos to generate hashcode, equals and toString.
   # hashCode & areEqual are used as a pair and both get their queue off of the @BusinessKey annotation.
   # toString, is unique as it just prints out all variables and their content for a PojoClass.

 * BusinessKey
  Use this annotation to highlight what fields in your Pojo are to be used for hashcode generation and equality.  Possible configuration parameters on this annotation are
    # caseSensitive (used to indicate to ignore case when comparing CharacterSequence classes).
    # required (used to indicate don't allow field to be null upon equality or hashcode generation).
    # composite (used to indicate this field is part of a group that can have null fields, as long as one member of the group isn't null).